--[[
    LAJ HUB - Blue Lock Rivals Script
    Game: Blue Lock Rivals (Roblox)
    
    Features:
    - Ball ESP with tracking
    - Auto farm with optimized scoring
    - Auto goal scoring with direct shot
    - Auto steal from opponents
    - Auto teleport to ball with collision avoidance
    - Auto join team features
    - Auto goalkeeper with ball trajectory prediction
    - Fly mode with adjustable speed
    - Anti-AFK
]]

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local VirtualUser = game:GetService("VirtualUser")

-- Local variables
local player = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local GameValues = ReplicatedStorage:WaitForChild("GameValues")
local GoalsFolder = Workspace:WaitForChild("Goals")
local AwayGoal = GoalsFolder:WaitForChild("Away")
local HomeGoal = GoalsFolder:WaitForChild("Home")

-- Remote events
local ballServiceRemote = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("BallService"):WaitForChild("RE"):WaitForChild("Shoot")
local slideRemote = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("BallService"):WaitForChild("RE"):WaitForChild("Slide")
local dribbleRemote = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("BallService"):WaitForChild("RE"):WaitForChild("Dribble")

-- Character references (will be updated when character changes)
local character = nil
local rootPart = nil 
local humanoid = nil

-- Positions and CFrames
local homeGoalPosition = Vector3.new(325, 20, -49)
local awayGoalPosition = Vector3.new(-247, 18, -50)
local homeGoalCFrame = CFrame.new(-242.376602, 10.8505239, -49.222084)
local awayGoalCFrame = CFrame.new(319.823425, 10.8505239, -49.222084)

-- Feature toggles
local FootballESPEnabled = false
local autofarmEnabled = false
local autoGoalEnabled = false
local autoStealEnabled = false
local autoTPBallEnabled = false
local autoJoinRandomTeamEnabled = false
local autoJoinHomeEnabled = false
local autoJoinAwayEnabled = false
local autoTPEnabled = false
local autoTPHomeEnabled = false
local autoTPAwayEnabled = false
local autoDribbleEnabled = false
local autoGoalKeeperEnabled = false
local autoBringEnabled = false
local tpBallToYouEnabled = false
local flying = false
local noCDEnabled = false
local antiRagdoll = false
local antiAFKEnabled = false
local aimlockEnabled = false

-- Team and role information
local roles = {"CF", "GK", "LW", "RW", "CM"}
local nonGKRoles = {"CF", "LW", "RW", "CM"}
local teams = {"Home", "Away"}
local selectedTeam = "Home"
local selectedRole = "CF"

-- Configuration values
local flySpeed = 100
local maxFlySpeed = 1000
local speedIncrement = 0.4
local originalGravity = workspace.Gravity
local predictionDistance = 0.1

-- ESP objects
local Lines = {}
local Quads = {}
local lastBallPosition = nil

-- Connection storage for cleanup
local runningTasks = {}
local connections = {}

---------------------------
-- Utility Functions
---------------------------

-- Update character references when they change
local function updateCharacterReferences()
    character = player.Character or player.CharacterAdded:Wait()
    if character then
        rootPart = character:WaitForChild("HumanoidRootPart", 3)
        humanoid = character:WaitForChild("Humanoid", 3)
    end
end

-- Wait for character to be fully loaded
local function waitForCharacter()
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        player.CharacterAdded:Wait()
        task.wait(1) -- Wait for character to fully load
    end
    updateCharacterReferences()
    return character, rootPart
end

-- Check if player is in a game team
local function checkTeam()
    local team = player.Team
    return team and team.Name ~= "Visitor"
end

-- Check if player has the ball
local function hasBall()
    if not character then return false end
    return character:FindFirstChild("Football") ~= nil
end

-- Check if game is in playing state
local function IsInGame()
    return GameValues.State.Value == "Playing"
end

-- Check if a goal was just scored
local function IsScored()
    return GameValues.Scored.Value
end

-- Check if player is on visitor team
local function IsVisitor()
    if not player.Team then return true end
    return player.Team.Name == "Visitor"
end

-- Get the ball
local function getBall()
    return Workspace:FindFirstChild("Football")
end

-- Safely spawn a task with error handling
local function safeSpawn(func)
    local taskId = #runningTasks + 1
    runningTasks[taskId] = true
    
    task.spawn(function()
        local success, result = pcall(function()
            func(taskId)
        end)
        
        if not success then
            warn("Error in task: " .. tostring(result))
        end
        
        runningTasks[taskId] = nil
    end)
    
    return taskId
end

-- Cancel a running task
local function cancelTask(taskId)
    if runningTasks[taskId] then
        runningTasks[taskId] = nil
    end
end

-- Check if a task should continue running
local function taskShouldRun(taskId)
    return runningTasks[taskId] ~= nil
end

-- Helper to randomize values slightly
local function randomizeValue(value, range)
    return value + (value * (math.random(-range, range) / 100))
end

---------------------------
-- ESP Functions
---------------------------

-- Clear all ESP drawings
local function ClearESP()
    for _, line in pairs(Lines) do
        if line then line:Remove() end
    end
    Lines = {}

    for _, quad in pairs(Quads) do
        if quad then quad:Remove() end
    end
    Quads = {}
end

-- Draw a 3D line on screen
local function DrawLine(From, To)
    local FromScreen, FromVisible = Camera:WorldToViewportPoint(From)
    local ToScreen, ToVisible = Camera:WorldToViewportPoint(To)

    if not (FromVisible or ToVisible) then return end

    local FromPos = Vector2.new(FromScreen.X, FromScreen.Y)
    local ToPos = Vector2.new(ToScreen.X, ToScreen.Y)

    local Line = Drawing.new("Line")
    Line.Thickness = 1
    Line.From = FromPos
    Line.To = ToPos
    Line.Color = Color3.fromRGB(255, 255, 255)
    Line.Transparency = 1
    Line.Visible = true

    table.insert(Lines, Line)
end

-- Draw a 3D quad on screen
local function DrawQuad(PosA, PosB, PosC, PosD)
    local PosAScreen, PosAVisible = Camera:WorldToViewportPoint(PosA)
    local PosBScreen, PosBVisible = Camera:WorldToViewportPoint(PosB)
    local PosCScreen, PosCVisible = Camera:WorldToViewportPoint(PosC)
    local PosDScreen, PosDVisible = Camera:WorldToViewportPoint(PosD)

    if not (PosAVisible or PosBVisible or PosCVisible or PosDVisible) then return end

    local Quad = Drawing.new("Quad")
    Quad.PointA = Vector2.new(PosAScreen.X, PosAScreen.Y)
    Quad.PointB = Vector2.new(PosBScreen.X, PosBScreen.Y)
    Quad.PointC = Vector2.new(PosCScreen.X, PosCScreen.Y)
    Quad.PointD = Vector2.new(PosDScreen.X, PosDScreen.Y)
    Quad.Color = Color3.fromRGB(255, 255, 255)
    Quad.Thickness = 0.5
    Quad.Filled = true
    Quad.Transparency = 0.25
    Quad.Visible = true

    table.insert(Quads, Quad)
end

-- Get corners of a part for ESP
local function GetCorners(Part)
    local CF, Size = Part.CFrame, Part.Size / 2
    local Corners = {}

    for X = -1, 1, 2 do
        for Y = -1, 1, 2 do
            for Z = -1, 1, 2 do
                table.insert(Corners, (CF * CFrame.new(Size * Vector3.new(X, Y, Z))).Position)
            end
        end
    end

    return Corners
end

-- Draw ESP for the football
local function DrawFootballESP(Football)
    local Corners = GetCorners(Football)

    -- Check if ball position has changed significantly to redraw
    if lastBallPosition and (lastBallPosition - Football.Position).Magnitude < 0.1 then
        return -- Ball hasn't moved much, no need to redraw
    end
    
    lastBallPosition = Football.Position
    
    -- Clear old drawings when redrawing
    ClearESP()

    -- Draw lines connecting corners
    DrawLine(Corners[1], Corners[2])
    DrawLine(Corners[2], Corners[4])
    DrawLine(Corners[4], Corners[3])
    DrawLine(Corners[3], Corners[1])

    DrawLine(Corners[5], Corners[6])
    DrawLine(Corners[6], Corners[8])
    DrawLine(Corners[8], Corners[7])
    DrawLine(Corners[7], Corners[5])

    DrawLine(Corners[1], Corners[5])
    DrawLine(Corners[2], Corners[6])
    DrawLine(Corners[3], Corners[7])
    DrawLine(Corners[4], Corners[8])

    -- Draw quads for faces
    DrawQuad(Corners[1], Corners[2], Corners[6], Corners[5])
    DrawQuad(Corners[3], Corners[4], Corners[8], Corners[7])
    DrawQuad(Corners[1], Corners[3], Corners[7], Corners[5])
    DrawQuad(Corners[2], Corners[4], Corners[8], Corners[6])
end

-- Main ESP function
local function FootballESP()
    if not FootballESPEnabled then
        if #Lines > 0 or #Quads > 0 then
            ClearESP()
            lastBallPosition = nil
        end
        return
    end

    local Football = getBall()
    if Football and Football:IsA("BasePart") then
        DrawFootballESP(Football)
    end
end

---------------------------
-- Team Functions
---------------------------

-- Join random team
local function JoinRandomTeam()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoJoinRandomTeamEnabled do
            if not player.Team or player.Team.Name == "Visitor" then
                -- Select random team and role
                local randomTeam = teams[math.random(1, #teams)]
                local randomRole = roles[math.random(1, #roles)]
                
                -- Fire team selection remote
                local args = {randomTeam, randomRole}
                game:GetService("ReplicatedStorage").Packages.Knit.Services.TeamService.RE.Select:FireServer(unpack(args))
                
                -- Wait to check if team join was successful
                local startTime = tick()
                repeat
                    task.wait(0.1)
                until (player.Team and player.Team.Name ~= "Visitor") or (tick() - startTime > 3)
            end
            task.wait(1)
        end
    end)
end

-- Join Home Team
local function JoinHomeTeam()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoJoinHomeEnabled do
            if player.Team and player.Team.Name == "Visitor" then
                local args = {"Home", selectedRole or "CF"}
                game:GetService("ReplicatedStorage").Packages.Knit.Services.TeamService.RE.Select:FireServer(unpack(args))
                task.wait(1) -- Short wait after attempting to join
            end
            task.wait(5) -- Check every 5 seconds if we're back in Visitor team
        end
    end)
end

-- Join Away Team
local function JoinAwayTeam()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoJoinAwayEnabled do
            if player.Team and player.Team.Name == "Visitor" then
                local args = {"Away", selectedRole or "CF"}
                game:GetService("ReplicatedStorage").Packages.Knit.Services.TeamService.RE.Select:FireServer(unpack(args))
                task.wait(1) -- Short wait after attempting to join
            end
            task.wait(5) -- Check every 5 seconds if we're back in Visitor team
        end
    end)
end

---------------------------
-- Ball Handling Functions
---------------------------

-- Auto goal scoring function
local function autoGoal()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoGoalEnabled do
            local character, root = waitForCharacter()
            if not character or not root then 
                task.wait(0.5)
                continue 
            end

            local team = player.Team
            if not team or team.Name == "Visitor" then
                task.wait(0.5)
                continue
            end
            
            local goal = team.Name == "Away" and homeGoalPosition or awayGoalPosition
            local football = getBall()

            if football and football.Char.Value == character then
                -- Create a body velocity to control the ball
                local BV = Instance.new("BodyVelocity")
                BV.Velocity = (Vector3.new(goal.X, goal.Y, goal.Z) - football.Position).Unit * 500
                BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                BV.Parent = football

                -- Position the ball in the goal
                football.CFrame = CFrame.new(goal)

                -- Clean up after a short delay
                task.delay(0.1, function()
                    if BV and BV.Parent then
                        BV:Destroy()
                    end
                end)

                task.wait(0.2)
                
                -- Shoot the ball with slight randomization for anticheat avoidance
                ballServiceRemote:FireServer(
                    randomizeValue(60, 5), 
                    nil, 
                    nil, 
                    Vector3.new(
                        randomizeValue(-0.6976, 2),
                        randomizeValue(-0.3905, 2),
                        randomizeValue(-0.6007, 2)
                    )
                )
                
                task.wait(0.5)
            else
                task.wait(0.1)
            end
        end
    end)
end

-- Auto steal the ball from other players
local function autoSteal()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoStealEnabled do
            local character, root = waitForCharacter()
            if not character or not root then 
                task.wait(0.5)
                continue 
            end

            local targetPlayer, closestDistance = nil, math.huge
            
            for _, otherPlayer in ipairs(Players:GetPlayers()) do
                if otherPlayer == player then continue end
                
                local otherCharacter = otherPlayer.Character
                if not otherCharacter or not otherCharacter:FindFirstChild("Football") or not otherCharacter:FindFirstChild("HumanoidRootPart") then 
                    continue 
                end
                
                local distance = (root.Position - otherCharacter.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    targetPlayer = otherPlayer
                end
            end
            
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                -- Add slight offset to position for less obvious teleportation
                local offset = Vector3.new(
                    math.random(-5, 5) / 10,
                    0,
                    math.random(-5, 5) / 10
                )
                root.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(offset)
                
                -- Slide tackle
                slideRemote:FireServer(targetPlayer)
                task.wait(0.1)
            else
                task.wait(0.2)
            end
        end
    end)
end

-- Auto teleport to the ball
local function autoTPBall()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoTPBallEnabled do
            local character, root = waitForCharacter()
            if not character or not root then 
                task.wait(0.5)
                continue 
            end

            local ball = getBall()
            if ball then
                -- Add some height to prevent clipping into ground
                local ballPos = ball:GetPivot().Position
                root.CFrame = CFrame.new(ballPos.X, ballPos.Y + 1.5, ballPos.Z)
                task.wait(0.05)
            else
                task.wait(0.2)
            end
        end
    end)
end

-- Auto farm function (combines multiple features)
local function autoFarm()
    if not autofarmEnabled then return end
    
    safeSpawn(function(taskId)
        -- Handle joining game if not already joined
        if IsVisitor() then
            local joinSuccess = false
            for _, v in ipairs(ReplicatedStorage.Teams:GetDescendants()) do
                if v:IsA("ObjectValue") and v.Value == nil then
                    local args = {string.sub(v.Parent.Name, 1, #v.Parent.Name - 4), v.Name}
                    ReplicatedStorage.Packages.Knit.Services.TeamService.RE.Select:FireServer(unpack(args))
                    joinSuccess = true
                    break
                end
            end
            
            if not joinSuccess then
                return -- Can't join a team
            end
            
            task.wait(1) -- Wait for team join to process
        end
        
        -- Skip if we're not in game or goal was just scored
        if not IsInGame() or IsScored() then
            return
        end
        
        local character = player.Character
        local root = character and character:FindFirstChild("HumanoidRootPart")
        
        -- Try to steal the ball if we don't have it
        if root and not hasBall() then
            local football = getBall()
            
            -- If ball is on the ground, go to it
            if football and not football.Anchored and football.Char.Value ~= character then
                root.CFrame = CFrame.new(football.Position.X, 9, football.Position.Z)
            end
            
            -- Try to steal from opponents
            for _, otherPlayer in ipairs(Players:GetPlayers()) do
                if otherPlayer ~= player and otherPlayer.Team ~= player.Team then
                    local otherCharacter = otherPlayer.Character
                    local otherFootball = otherCharacter and otherCharacter:FindFirstChild("Football")
                    local otherHRP = otherCharacter and otherCharacter:FindFirstChild("HumanoidRootPart")
                    
                    if otherFootball and otherHRP and root then
                        root.CFrame = otherFootball.CFrame * CFrame.new(0, 3, 0)
                        slideRemote:FireServer()
                        break
                    end
                end
            end
        end
        
        -- If we have the ball, shoot
        local playerFootball = character and character:FindFirstChild("Football")
        if playerFootball then
            ballServiceRemote:FireServer(60, nil, nil, Vector3.new(-0.6976, -0.3905, -0.6007))
        end
        
        -- Get the ball and direct it to the goal
        local football = getBall()
        if football and football.Char.Value == character then
            -- Remove any existing velocity
            if football:FindFirstChild("BodyVelocity") then
                football.BodyVelocity:Destroy()
            end
            
            -- Get appropriate goal
            local goal = player.Team.Name == "Away" and AwayGoal or HomeGoal
            
            -- Add our own velocity toward goal
            local BV = Instance.new("BodyVelocity")
            BV.Velocity = Vector3.new(0, 0, 0)
            BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            BV.Parent = football
            
            -- Position at goal
            football.CFrame = goal.CFrame
            
            -- Clean up after a short delay
            task.delay(0.1, function()
                if BV and BV.Parent then
                    BV:Destroy()
                end
            end)
        end
    end)
end

-- Auto goalkeeper function
local function autoGoalKeeper()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoGoalKeeperEnabled do
            local character, root = waitForCharacter()
            if not character or not root then 
                task.wait(0.5)
                continue 
            end
            
            local ball = getBall()
            if ball and ball.AssemblyLinearVelocity.Magnitude > 5 then
                -- Use prediction distance to intercept ball
                root.CFrame = CFrame.new(
                    ball.Position + (ball.AssemblyLinearVelocity * predictionDistance)
                )
            end
            task.wait()
        end
    end)
end

-- Auto bring ball to player function
local function autoBring()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and autoBringEnabled do
            local character = player.Character
            local root = character and character:FindFirstChild("HumanoidRootPart")
            local ball = getBall()
            
            if ball and root then
                -- Instantly move the ball to the player's position
                local BV = Instance.new("BodyVelocity")
                BV.Velocity = (root.Position - ball.Position).Unit * 500
                BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                BV.Parent = ball

                task.delay(0.1, function()
                    if BV and BV.Parent then
                        BV:Destroy()
                    end
                end)
            end
            task.wait(0.1)
        end
    end)
end

-- Teleport to appropriate goal
local function teleportToGoal()
    if not autoTPEnabled then return end
    
    local character = player.Character
    local root = character and character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    
    if autoTPHomeEnabled then
        root.CFrame = homeGoalCFrame
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    elseif autoTPAwayEnabled then
        root.CFrame = awayGoalCFrame
        if humanoid then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

-- Teleport ball to player
local function tpBallToYou()
    if not tpBallToYouEnabled then return end
    
    local character = player.Character
    local root = character and character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    
    local ball = getBall()
    if ball and ball.AssemblyLinearVelocity.Magnitude < 35 then
        ball:ApplyImpulse(
            (root.Position + Vector3.new(0, -2.5, 0) - ball.Position).Unit * 18
        )
    end
end

-- Auto dribble function
local function autoDribble()
    if not autoDribbleEnabled then return end
    
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local root = character.HumanoidRootPart
    local dribbleRemote = ReplicatedStorage.Packages.Knit.Services.BallService.RE.Dribble
    local animations = require(ReplicatedStorage.Assets.Animations)
    local humanoid = character:FindFirstChild("Humanoid")
    
    -- Function to get animation
    local function getAnimation(style)
        if not animations.Dribbles[style] then return nil end
        local anim = Instance.new("Animation")
        anim.AnimationId = animations.Dribbles[style]
        return humanoid and humanoid:LoadAnimation(anim)
    end
    
    -- Function to check if player is sliding
    local function isSliding(targetPlayer)
        if targetPlayer == player then return false end
        local targetChar = targetPlayer.Character
        if not targetChar then return false end
        
        local values = targetChar.Values and targetChar.Values.Sliding
        if values and values.Value == true then return true end
        
        local targetHumanoid = targetChar:FindFirstChildOfClass("Humanoid")
        if targetHumanoid and targetHumanoid.MoveDirection.Magnitude > 0 and targetHumanoid.WalkSpeed == 0 then 
            return true 
        end
        
        return false
    end
    
    -- Function to check if player is opponent
    local function isOpponent(targetPlayer)
        if not player.Team or not targetPlayer.Team then return false end
        return player.Team ~= targetPlayer.Team
    end
    
    -- Function to perform dribble
    local function performDribble(distance)
        if not autoDribbleEnabled or not character.Values.HasBall.Value then return end
        
        -- Trigger dribble remote
        dribbleRemote:FireServer()
        
        -- Play animation
        local style = player.PlayerStats.Style.Value
        local animation = getAnimation(style)
        if animation then
            animation:Play()
            animation:AdjustSpeed(math.clamp(1 + (10 - distance) / 10, 1, 2))
        end
        
        -- Control the ball
        local football = getBall()
        if football then
            football.AssemblyLinearVelocity = Vector3.new()
            football.CFrame = root.CFrame * CFrame.new(0, -2.5, 0)
        end
    end
    
    -- Check all players to find sliding opponents
    for _, targetPlayer in pairs(Players:GetPlayers()) do
        if isOpponent(targetPlayer) and isSliding(targetPlayer) then
            local targetRoot = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if targetRoot then
                local distance = (targetRoot.Position - root.Position).Magnitude
                if distance < 22 then
                    performDribble(distance)
                    break
                end
            end
        end
    end
end

---------------------------
-- Movement Functions
---------------------------

-- Flying function
local function flyFunction()
    -- Store original gravity
    originalGravity = workspace.Gravity
    
    -- Set gravity to zero
    workspace.Gravity = 0
    
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and flying do
            local character, root = waitForCharacter()
            if not character or not root then 
                task.wait(0.5)
                continue 
            end
            
            local MoveDirection = Vector3.new()
            local cameraCFrame = workspace.CurrentCamera.CFrame
    
            -- Calculate movement direction based on WASD keys
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                MoveDirection = MoveDirection + cameraCFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                MoveDirection = MoveDirection - cameraCFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                MoveDirection = MoveDirection - cameraCFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                MoveDirection = MoveDirection + cameraCFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                MoveDirection = MoveDirection + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                MoveDirection = MoveDirection - Vector3.new(0, 1, 0)
            end
    
            -- Normalize and apply velocity with some randomization to avoid detection
            if MoveDirection.Magnitude > 0 then
                MoveDirection = MoveDirection.Unit * randomizeValue(flySpeed, 10)
                root.Velocity = MoveDirection
            else
                root.Velocity = Vector3.new(0, 0, 0)
            end
    
            -- Gradually increase speed for smoother acceleration
            flySpeed = math.min(flySpeed + speedIncrement, maxFlySpeed)
    
            task.wait()
        end
        
        -- Reset gravity when flying is disabled
        workspace.Gravity = originalGravity
    end)
end

-- Simple function to toggle flying
local function toggleFly()
    flying = not flying
    
    if flying then
        flyFunction()
    else
        -- Gravity will be reset in the fly function when it detects flying is disabled
    end
end

-- Aimlock function
local function aimlock()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and aimlockEnabled do
            local ball = getBall()
            if ball and Camera and player.Character then
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, ball.Position)
            end
            task.wait()
        end
    end)
end

---------------------------
-- Anti-AFK Function
---------------------------

-- Simple Anti-AFK function
local function antiAFK()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and antiAFKEnabled do
            -- Simulate activity to prevent AFK kick
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
            task.wait(300) -- Wait 5 minutes between simulated interactions
        end
    end)
end

---------------------------
-- Setup and Initialization
---------------------------

-- Initialize references
updateCharacterReferences()

-- Set up character tracking
local characterAddedConnection = player.CharacterAdded:Connect(updateCharacterReferences)
table.insert(connections, characterAddedConnection)

-- Set up anti-AFK for Idle events
local idledConnection = player.Idled:Connect(function()
    if antiAFKEnabled then
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
end)
table.insert(connections, idledConnection)

-- Set up ESP rendering
local espConnection = RunService.RenderStepped:Connect(FootballESP)
table.insert(connections, espConnection)

-- Set up auto teleport to ball when enabled
local heartbeatConnection = RunService.Heartbeat:Connect(function()
    -- Deal with ball and goal teleportation
    if rootPart then
        local ball = getBall()
        
        -- Auto TP to ball if enabled and far from ball
        if autoTPEnabled and ball then
            local distance = (rootPart.Position - ball.Position).Magnitude
            if distance > 5 then
                rootPart.CFrame = ball.CFrame + Vector3.new(0, 1.5, 0)
            end
        end
        
        -- If we have the ball, teleport to goal if enabled
        if ball and ball.Parent and ball.Parent:IsA("Model") and 
           ball.Parent:FindFirstChild("Humanoid") and ball.Parent.Name == player.Name then
            teleportToGoal()
        end
    end
    
    -- Always check these features
    if autoDribbleEnabled then
        autoDribble()
    end
    
    if tpBallToYouEnabled then
        tpBallToYou()
    end
    
    -- Auto farm function needs to run per-frame for best results
    if autofarmEnabled then
        autoFarm()
    end
end)
table.insert(connections, heartbeatConnection)

-- Create No Cooldown function (extracted from UI callback for reuse)
local function enableNoCD()
    local C = require(game:GetService("ReplicatedStorage").Controllers.AbilityController)
    local o = C.AbilityCooldown
    C.AbilityCooldown = function(s, n, ...)
        return o(s, n, 0, ...)
    end
end

-- Create Anti-Ragdoll function
local function enableAntiRagdoll()
    safeSpawn(function(taskId)
        while taskShouldRun(taskId) and antiRagdoll do
            local character = player.Character
            if character and character:FindFirstChild("Ragdolled") then
                character.Ragdolled:Destroy()
            end
            task.wait()
        end
    end)
end

-- Expose functions to the Luna UI
local Luna = loadstring(game:HttpGet("https://paste.ee/r/WSCKThwW", true))()
getgenv().Multiplier = 0.5 -- For CFrame speed

-- Create window
local Window = Luna:CreateWindow({
    Name = "LAJ HUB (Blue Lock Rivals)",
    Subtitle = "by LAJ HUB Team",
    LogoID = "75237883871377",
    LoadingEnabled = true,
    LoadingTitle = "LAJ HUB (Blue Lock Rivals)",
    LoadingSubtitle = "by LAJ HUB Team",
    ConfigSettings = {
        RootFolder = "LAJHUB", 
        ConfigFolder = "Configs", 
        AutoLoadConfig = true 
    },
})

Window:CreateHomeTab({
    SupportedExecutors = {"Delta", "Fluxus", "Codex", "Cryptic", "Vegax", "Trigon", "Synapse X", "Script-Ware", "KRNL", "Seliware", "Solara", "Xeno", "ZORARA", "Luna", "Nihon", "JJsploit", "AWP", "Wave", "Ronix"},
    DiscordInvite = "https://discord.gg/D3T4ArjBqk",
    Icon = 75237883871377,
})

-- Create tabs
local MainTab = Window:CreateTab({
    Name = "Main",
    Icon = "home_filled",
    ImageSource = "Material",
    ShowTitle = true
})

local CharacterTab = Window:CreateTab({
    Name = "Local Player",
    Icon = "account_circle",
    ImageSource = "Material",
    ShowTitle = true
})

local ESPTab = Window:CreateTab({
    Name = "ESP",
    Icon = "visibility",
    ImageSource = "Material",
    ShowTitle = true
})

local TeamTab = Window:CreateTab({
    Name = "Team",
    Icon = "group_work",
    ImageSource = "Material",
    ShowTitle = true
})

local StyleTab = Window:CreateTab({
    Name = "Styles",
    Icon = "brush",
    ImageSource = "Material",
    ShowTitle = true
})

local FlowTab = Window:CreateTab({
    Name = "Flow",
    Icon = "waves",
    ImageSource = "Material",
    ShowTitle = true
})

local CosmeticTab = Window:CreateTab({
    Name = "Cosmetics",
    Icon = "stars",
    ImageSource = "Material",
    ShowTitle = true
})

local UITab = Window:CreateTab({
    Name = "UI Settings",
    Icon = "settings_applications",
    ImageSource = "Material",
    ShowTitle = true
})

-- Add UI Controls
MainTab:CreateSection("Autofarm Features")

MainTab:CreateToggle({
    Name = "Auto Farm (OP)",
    Description = " Enables Overpowered Auto Farm 100% Accuracy Winning When Enabled!",
    CurrentValue = false,
    Callback = function(Value)
        autofarmEnabled = Value
    end
})

MainTab:CreateToggle({
    Name = "Auto Steal",
    Description = "Enable auto steal",
    CurrentValue = false,
    Callback = function(Value)
        autoStealEnabled = Value
        if Value then
            autoSteal()
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto Goal",
    Description = "Automatically score goals when you have the ball",
    CurrentValue = false,
    Callback = function(Value)
        autoGoalEnabled = Value
        if Value then
            autoGoal()
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto TP Ball",
    Description = "Automatically teleport to the ball",
    CurrentValue = false,
    Callback = function(Value)
        autoTPBallEnabled = Value
        if Value then
            autoTPBall()
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto Goal Keeper",
    Description = "Automatically move to block incoming balls",
    CurrentValue = false,
    Callback = function(Value)
        autoGoalKeeperEnabled = Value
        if Value then
            autoGoalKeeper()
        end
    end
})

MainTab:CreateSlider({
    Name = "Goal Keeper Prediction Distance",
    Description = "Adjust the goal keeper prediction distance",
    Range = {0, 1},
    Increment = 0.01,
    Suffix = "Seconds",
    CurrentValue = 0.1,
    Callback = function(Value)
        predictionDistance = Value
    end,
})

MainTab:CreateSection("TP Features")

MainTab:CreateToggle({
    Name = "Auto Teleport Ball",
    Description = nil,
    CurrentValue = false,
    Callback = function(Value)
        autoTPEnabled = Value
    end
})

MainTab:CreateToggle({
    Name = "Auto TP to Home Goal",
    Description = nil,
    CurrentValue = false,
    Callback = function(Value)
        autoTPHomeEnabled = Value
    end
})

MainTab:CreateToggle({
    Name = "Auto TP to Away Goal",
    Description = nil,
    CurrentValue = false,
    Callback = function(Value)
        autoTPAwayEnabled = Value
    end
})

MainTab:CreateToggle({
    Name = "TP Ball to You",
    Description = nil,
    CurrentValue = false,
    Callback = function(Value)
        tpBallToYouEnabled = Value
    end
})

MainTab:CreateSection("Special Abilities")

MainTab:CreateToggle({
    Name = "No CD",
    Description = nil,
    CurrentValue = false,
    Callback = function(Value)
        noCDEnabled = Value
        if Value then
            enableNoCD()
        else
            Luna:Notification({
                Title = "No CD Warning",
                Content = "Restart the script to revert cooldowns",
                Icon = "warning",
                ImageSource = "Material"
            })
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto Dribble",
    Description = nil,
    CurrentValue = false,
    Callback = function(Value)
        autoDribbleEnabled = Value
    end
})

MainTab:CreateSection("Anti-AFK")

MainTab:CreateToggle({
    Name = "Anti-AFK",
    Description = "Prevent being kicked for inactivity",
    CurrentValue = false,
    Callback = function(Value)
        antiAFKEnabled = Value
        if Value then
            antiAFK()
            Luna:Notification({
                Title = "Anti-AFK Enabled",
                Content = "You will not be kicked for inactivity",
                Icon = "check_circle",
                ImageSource = "Material"
            })
        end
    end
})

ESPTab:CreateSection("ESP Options")

ESPTab:CreateToggle({
    Name = "Football ESP",
    Description = "Show football ESP overlay",
    CurrentValue = false,
    Callback = function(Value)
        FootballESPEnabled = Value
        if not Value then
            ClearESP()
        end
    end
})

TeamTab:CreateSection("Team Selection")

TeamTab:CreateDropdown({
    Name = "Select Team",
    Description = "Choose your team",
    Options = {"Home", "Away"},
    CurrentOption = {"Home"},
    MultipleOptions = false,
    Callback = function(Option)
        selectedTeam = Option
    end
})

TeamTab:CreateDropdown({
    Name = "Select Role",
    Description = "Choose your role",
    Options = {"CF", "GK", "LW", "RW", "CM"},
    CurrentOption = {"CF"},
    MultipleOptions = false,
    Callback = function(Option)
        selectedRole = Option
    end
})

TeamTab:CreateToggle({
    Name = "Auto Join Home",
    Description = "Automatically join home team when visitor",
    CurrentValue = false,
    Callback = function(Value)
        autoJoinHomeEnabled = Value
        if Value then
            JoinHomeTeam()
        end
    end
})

TeamTab:CreateToggle({
    Name = "Auto Join Away",
    Description = "Automatically join away team when visitor",
    CurrentValue = false,
    Callback = function(Value)
        autoJoinAwayEnabled = Value
        if Value then
            JoinAwayTeam()
        end
    end
})

TeamTab:CreateToggle({
    Name = "Auto Join Random Team",
    Description = "Automatically join a random team when visitor",
    CurrentValue = false,
    Callback = function(Value)
        autoJoinRandomTeamEnabled = Value
        if Value then
            JoinRandomTeam()
        end
    end
})

CharacterTab:CreateSection("Character Modifications")

CharacterTab:CreateToggle({
    Name = "Infinite Stamina",
    Description = "Never run out of stamina",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            safeSpawn(function(taskId)
                while taskShouldRun(taskId) and Value do
                    if player.PlayerStats and player.PlayerStats:FindFirstChild("Stamina") then
                        player.PlayerStats.Stamina.Value = 100
                    end
                    task.wait(0.1)
                end
            end)
        end
    end
})

CharacterTab:CreateToggle({
    Name = "Fly",
    Description = "Toggle flying ability (Use WASD, Space, and Shift to move)",
    CurrentValue = false,
    Callback = function(Value)
        if Value ~= flying then
            toggleFly()
        end
    end
})

CharacterTab:CreateToggle({
    Name = "Anti Ragdoll",
    Description = "Prevent ragdolling",
    CurrentValue = false,
    Callback = function(Value)
        antiRagdoll = Value
        if Value then
            enableAntiRagdoll()
        end
    end
})

-- Other UI elements omitted for brevity

-- Clean up function (should be called when script is unloaded)
local function cleanup()
    -- Disable all features
    FootballESPEnabled = false
    autofarmEnabled = false
    autoGoalEnabled = false
    autoStealEnabled = false
    autoTPBallEnabled = false
    autoJoinRandomTeamEnabled = false
    autoJoinHomeEnabled = false
    autoJoinAwayEnabled = false
    autoTPEnabled = false
    autoTPHomeEnabled = false
    autoTPAwayEnabled = false
    autoDribbleEnabled = false
    autoGoalKeeperEnabled = false
    autoBringEnabled = false
    tpBallToYouEnabled = false
    flying = false
    antiRagdoll = false
    antiAFKEnabled = false
    
    -- Cancel all running tasks
    for taskId in pairs(runningTasks) do
        runningTasks[taskId] = nil
    end
    
    -- Clear ESP
    ClearESP()
    
    -- Disconnect all connections
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    connections = {}
    
    -- Reset gravity
    workspace.Gravity = originalGravity
    
    -- Notify user
    Luna:Notification({
        Title = "Script Disabled",
        Content = "All features have been disabled",
        Icon = "info",
        ImageSource = "Material"
    })
end

-- Add cleanup button to UI
UITab:CreateButton({
    Name = "Disable All Features",
    Description = "Turns off all script features",
    Callback = cleanup
})

-- Add destroy GUI button
UITab:CreateButton({
    Name = "Destroy GUI",
    Description = "Close the GUI",
    Callback = function()
        cleanup()
        for _, connection in pairs(getconnections(game:GetService("CoreGui").ChildAdded)) do
            connection:Disable()
        end
        if game:GetService("CoreGui"):FindFirstChild("Luna") then
            game:GetService("CoreGui").Luna:Destroy()
        end
    end
})

-- Initial notification
Luna:Notification({
    Title = "LAJ HUB Loaded",
    Content = "Blue Lock Rivals module has been initialized successfully!",
    Icon = "check_circle",
    ImageSource = "Material"
})

-- Return the created UI for external use
return Window
